"""
DUnitRunner extends and uses the native python unittest framework.
DUnitRunner is a specialized unit test runner that allows passing command
line arguments to the test case itself rather than only passing arguments to
the unit test runner. Output generated by DUnitRunner includes JUnit
compliant XML, standard unittest text, and ascii text report for each
evaluation statement.
"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import sys
import os

import unittest

from Dtest.dunit import xmlrunner


class DUnitRunner(object):
    """
    DUnitRunner extends and uses the native python unittest framework.
    DUnitRunner is a specialized unit test runner that allows passing command
    line arguments to the test case itself rather than only passing arguments
    to the unit test runner. Output generated by DUnitRunner includes JUnit
    compliant XML, standard unittest text, and ascii text report for each
    evaluation statement.


    Python Usage:
        DUnitTestRunner.DUnitRunner(module, verbosity, buffer, failfast,
            typeRunner, evalFileOut evalStdOut, evalStdOutOnlyFail)

        module='__main__'
            Python unittest option
        verbosity=2
            Python unittest option
        buffer=False
            Python unittest option
        typeRunner="Unittest"
            DUnitTest option. "Unittest" instructs DUnitRunner to generate
            standard Python unittest output to the standard out. "Xml"
            instructs DUnitRunner to generate JUnit compatible XML output to
            a file.
        evalFileOut=False
            DUnitTest option. True instructs DUnitRunner to write evaluation
            statement results to the DUnitTest results file. False instructs
            DUnitRunner to not write evaluation statement results to the
            DUnitTest results file.
        evalStdOut=False
            DUnitTest option. True instructs DUnitRunner to write evaluation
            statement results to the standard out. False instructs
            DUnitRunner to not write evaluation statement results to the
            standard out.
        evalStdOutOnlyFail=False
            DUnit option. True instructs DUnitRunner to write evaluation
            statement results to the standard out only if the result is FAIL.
            False instructs DUnitRunner to write evaluation statement results
            to the standard out regardless of result value.


    Command Line Usage:
        python script.py verbosity= buffer= failfast= typeRunner=
            evalFileOut= evalStdOut= evalStdOutOnlyFail= isEvalAssertPass=

        verbosity=2
            Same as above
        buffer=False
            Same as above
        typeRunner=Unittest
            Same as above
        evalFileOut=False
            Same as above
        evalStdOut=False
            Same as above
        evalStdOutOnlyFail=False
            Same as above
        isEvalAssertPass=True
            DUnit option. True instructs DUnitRunner to assert each test
            method's unittest PASS/FAIL condition. False instructs DUnitRunner
            to not assert each test method's unittest PASS/FAIL condition.
            This circumvents unittest failures, forcing unittest into a
            success state even if one or more evaluation statements failed.
            Primary purpose is to generate successful output.orig files for
            comparison by DTEST.
    """

    def __init__(
        self,
        module="__main__",
        verbosity=2,
        buffer=False,
        failfast=False,
        typeRunner="Unittest",
        evalFileOut=False,
        evalStdOut=False,
        evalStdOutOnlyFail=False,
    ):
        # Unittest standard parameters
        self._verbosity = verbosity
        self._buffer = buffer
        self._failfast = failfast

        # DUnitTest parameters
        self._typeRunner = typeRunner
        self._evalFileOut = evalFileOut
        self._evalStdOut = evalStdOut
        self._evalStdOutOnlyFail = evalStdOutOnlyFail

        # Check the environment variable DUNIT_FILE_OUT to enable the file
        # output for advanced test results and requirements metrics. If
        # DUNIT_FILE_OUT is set to 'True', file out is enabled.
        if "DUNIT_FILE_OUT" in os.environ:
            if os.environ["DUNIT_FILE_OUT"] == "True":
                self._evalFileOut = True

        # DUnitTest sys.argv arguments
        self._isEvalAssertPass = True

        # Other command-line sys.argv arguments
        self._otherArgv = []

        # Parse the incoming sys.argv list for any arguments
        # specific to DUnitTest and unittest. Command-line sys.argv will
        # overwrite parameters passed in as part of __init__ method.
        # TODO: Consider removing arguments specific to DUnitTest and
        # unittest.
        # TODO: Need exception handling for when converting from string
        # to non-string.
        # TODO: Need to identify the data types for all keyword arguments,
        # and cast as appropriate.

        while len(sys.argv) > 1:
            item = sys.argv.pop()

            # Unittest specific arguments
            if item.startswith("buffer=") is True:
                if item.split("=")[1] == "True":
                    self._buffer = True
                if item.split("=")[1] == "False":
                    self._buffer = False
                continue

            if item.startswith("failfast=") is True:
                if item.split("=")[1] == "True":
                    self._failfast = True
                if item.split("=")[1] == "False":
                    self._failfast = False
                continue

            if item.startswith("verbosity=") is True:
                self._verbosity = int(item.split("=")[1])
                continue

            # DUnitTest specific arguments
            if item.startswith("typeRunner=") is True:
                self._typeRunner = item.split("=")[1]
                continue

            if item.startswith("evalFileOut=") is True:
                if item.split("=")[1] == "True":
                    self._evalFileOut = True
                if item.split("=")[1] == "False":
                    self._evalFileOut = False
                continue

            if item.startswith("evalStdOut=") is True:
                if item.split("=")[1] == "True":
                    self._evalStdOut = True
                if item.split("=")[1] == "False":
                    self._evalStdOut = False
                continue

            if item.startswith("evalStdOutOnlyFail=") is True:
                if item.split("=")[1] == "True":
                    self._evalStdOutOnlyFail = True
                if item.split("=")[1] == "False":
                    self._evalStdOutOnlyFail = False
                continue

            if item.startswith("isEvalAssertPass=") is True:
                if item.split("=")[1] == "True":
                    self._isEvalAssertPass = True
                if item.split("=")[1] == "False":
                    self._isEvalAssertPass = False
                continue

            # All other command-line sys.argv arguments; if it does
            # not match the above criteria than store in list for later use
            self._otherArgv.append(item)

        # Establish the test module and test module cases.
        if isinstance(module, str):
            self.module = __import__(module)

            for part in module.split(".")[1:]:
                self.module = getattr(self.module, part)

        # Create a test suite of test cases.
        mod = self.module
        testSuite = unittest.loader.defaultTestLoader.loadTestsFromModule(mod)

        # Add DUnitTest arguments back into sys.argv for use by
        # DUnit and the test case itself.
        # Although these arguments are not intended for aggregate
        # use, nothing prevents that from occurring. Following statement
        # ensures that if _isEvalAssertPass is set to False, used for
        # generating output.orig files, than only those flags for this task
        # are set correctly ignoring everything else.
        if self._isEvalAssertPass is False:
            sys.argv.insert(1, "evalFileOut=True")
            sys.argv.insert(1, "evalStdOut=False")
            sys.argv.insert(1, "evalStdOutOnlyFail=False")
            sys.argv.insert(1, "isEvalAssertPass=False")
            self._verbosity = 2
        else:
            if self._evalFileOut is True:
                sys.argv.insert(1, "evalFileOut=True")
                # self._verbosity = 0

            if self._evalStdOut is True:
                sys.argv.insert(1, "evalStdOut=True")

            if self._evalStdOutOnlyFail is True:
                sys.argv.insert(1, "evalStdOutOnlyFail=True")

        # Add the other command-line sys.argv arguments back to the
        # sys.argv object.
        for item in self._otherArgv:
            sys.argv.insert(1, item)

        # Run the applicable test runner.
        if self._typeRunner == "Unittest":
            # Comment: Use this to execute unittest TextTestRunner [default]
            ret = unittest.TextTestRunner(
                verbosity=self._verbosity,
                failfast=self._failfast,
                buffer=self._buffer,
            ).run(testSuite)
            if len(ret.errors) != 0 or len(ret.failures) != 0:
                sys.exit(1)

        elif self._typeRunner == "Xml":
            # TODO: Comment and make cleaner; this is messy.
            _xmlFileName = "TestSuite"

            for name in dir(self.module):
                obj = getattr(self.module, name)
                if isinstance(obj, type) and issubclass(obj, unittest.TestCase):
                    _xmlFileName = obj.__name__

            # Use this to execute XmlTestRunner (XmlRunner)
            xmlFile = open("TEST-unittest.suite." + _xmlFileName + ".xml", "w")
            xmlrunner.XMLTestRunner(stream=xmlFile).run(testSuite)
