#!/usr/bin/env python

"""Run KWStyle with DARTS style guide.

See http://public.kitware.com/KWStyle/features.htm

"""
from __future__ import absolute_import
from __future__ import division

from __future__ import print_function

import os
import sys
import argparse
import subprocess


def check(filename, style_filename):
    """Check with KWStyle."""
    return 0 == subprocess.call(['KWStyle', '-xml', style_filename, '-v',
                                 filename])


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        'paths', nargs='+', help='directories or files to check')

    parser.add_argument(
        '--blacklist', nargs='+',
        default=['auto', 'thirdparty', 'third_party', 'test', 'tests'],
        help='blacklisted items')

    parser.add_argument(
        '--exclude', nargs='+', default=[],
        help='Filenames to exclude')

    args = parser.parse_args()

    style_filename = os.path.join(
        os.path.split(os.path.realpath(sys.argv[0]))[0],
        'dtest_kwstyle.xml')

    if not os.path.exists(style_filename):
        sys.stderr.write('Could not find style file "{style}"\n'.format(
            style=style_filename))
        return 1

    filenames = list(set(args.paths))
    failures = []
    while filenames:
        name = filenames.pop(0)
        if os.path.isdir(name):
            for root, directories, children in os.walk(name):
                for blacklisted in args.blacklist:
                    try:
                        directories.remove(blacklisted)
                    except ValueError:
                        pass

                for d in directories:
                    if d.startswith('.'):
                        directories.remove(d)

                filenames += [os.path.join(root, f) for f in children
                              if (f.endswith('.cc') or f.endswith('.cpp') or f.endswith('.h')) and
                              not f.startswith('.') and
                              'swigwrap' not in f and
                              '_lcm.' not in f and
                              f not in args.exclude]
        else:
            if name in args.exclude:
                continue
            if not check(name, style_filename=style_filename):
                failures.append(name)

    return len(failures)


if __name__ == '__main__':
    sys.exit(main())
